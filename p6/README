CMP SCI 4760 Operating Systems Project 6
********************************************************************************
Description
This project simulates memory management in an operating system using paging and 
an Additional Reference Bits Page Replacement Algorithm.

OSS
The main program (oss) starts by checking if the user has provided any 
arguments. The allowed argumetns are listed below and when the program is given 
the -h argument. Then oss loads a single structure into shared memory, a simulated 
clock. Then it enters an infinite loop where it will only terminate after 2 real 
life seconds. In the  loop it will spawn processess at random intervals between 0 
and 500000 ns. If it is not spawning a child then it is checking a message queue 
for messages from the children. The message will be a request for memory or 
signalling normal termination.
There are 4 possible outcomes upon recieving a message from a user:
1. No Page Fault - Page requested is already in memory
2. Page Fault
    a. the page is not in memory but there is an empty frame that the page can 
       insterted into
    b. the page is not in memory but there is no empty frame and a page must be 
       replaced using the algorithm
3. Termination - the user process is going to terminate

User
The user begins by attaching to the simulated clock. It then enters a loop
sending messages of random types to oss. As long as all requests are satisfied
then user will continue looping until it randomly decides to terminate In which
case it sends a message indicating it is terminating. If a request is denied then
it will wait to be granted the resource by waiting to receive a message from oss.

MESSAGING RULES USED IN THIS PROJECT 
 - messages are always sent to specific processes using mtype
 - mtype is the process id of the message receiver in this case oss will have 
   a pseudo-process id of 20 
 - therefore when sending a message to oss mtype will be 20
 - oss will only receive messages of mtype 20
 - children will use there simulated process ids
 - meaning they will only receive messages whose mtype = their simulated pid 
 - msg.sender is the message sender

This program can take options that are processed using getopt()
The following options are accepted:
    
  -h           : to display a help message
  -o filename  : to designate the log file
  -n x         : x = the max amount of concurrent child processes



Default values: 
 n = 18
 log file = log.txt

Logging
Everything relevent to memory management is printed to the log file until 100000+
lines have been printed
 
How to Compile and Execute:

  make
  ./oss
    OR
  ./oss opts*
  
  *any combination of the options listed above
********************************************************************************